#! ruby
require 'test/unit'

require 'rbon'
require './test/data.rb'

class TestDump < Test::Unit::TestCase
  def test_dump
    assert_equal "nil\n", RBON.dump(A)
    assert_equal "0\n", RBON.dump(B)
    assert_equal "1.0\n", RBON.dump(C)
    assert_equal %Q("Two"\n), RBON.dump(D)

    assert_equal <<~THIS, RBON.dump(E)
      "three\\n" +
      "Three\\n" +
      "THREE"
    THIS

    assert_equal ":Four\n", RBON.dump(F)

    assert_equal "[]\n", RBON.dump(G)
    assert_equal "{}\n", RBON.dump(H)

    assert_equal <<~THIS, RBON.dump(I)
      [
        :Four,
        [],
        {}
      ]
    THIS

    assert_equal <<~THIS, RBON.dump(J)
      [
        {},
        :Four,
        []
      ]
    THIS

    assert_equal <<~THIS, RBON.dump(K)
      [
        [],
        {},
        :Four
      ]
    THIS

    assert_equal <<~THIS, RBON.dump(L)
      {
        a: nil,
        b: 0,
        c: 1.0,
        d: "Two",
        e: "three\\n" +
        "Three\\n" +
        "THREE",
        f: :Four,
        g: [],
        h: {}
      }
    THIS

    assert_equal <<~THIS, RBON.dump(M)
      {
        l: {
          a: nil,
          b: 0,
          c: 1.0,
          d: "Two",
          e: "three\\n" +
          "Three\\n" +
          "THREE",
          f: :Four,
          g: [],
          h: {}
        },
        i: [
          :Four,
          [],
          {}
        ],
        f: :Four
      }
    THIS

    assert_equal <<~THIS, RBON.dump(N)
      [
        {
          a: nil,
          b: 0,
          c: 1.0,
          d: "Two",
          e: "three\\n" +
          "Three\\n" +
          "THREE",
          f: :Four,
          g: [],
          h: {}
        },
        {
          l: {
            a: nil,
            b: 0,
            c: 1.0,
            d: "Two",
            e: "three\\n" +
            "Three\\n" +
            "THREE",
            f: :Four,
            g: [],
            h: {}
          },
          i: [
            :Four,
            [],
            {}
          ],
          f: :Four
        },
        :Four
      ]
    THIS

    assert_equal "false\n", RBON.dump(false)
    assert_equal "true\n", RBON.dump(true)
  end

  def test_its_ruby
    config = nil
    assert_nothing_raised do
      config = eval RBON.dump(N)
    end
    assert_equal :Four, config[1][:l][:f]
  end
end
